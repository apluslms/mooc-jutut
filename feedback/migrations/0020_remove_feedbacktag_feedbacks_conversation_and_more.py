# Generated by Django 4.2.1 on 2023-07-06 09:48

from django.db import migrations, models
import django.db.models.deletion


def generate_conversations_for_old_feedback(apps, schema_editor):
    Conversation = apps.get_model("feedback", "Conversation")
    Feedback = apps.get_model("feedback", "Feedback")
    for fb in Feedback.objects.only('exercise', 'student', 'conversation'):
        conv, _created = Conversation.objects.get_or_create(
            exercise=fb.exercise,
            student=fb.student,
        )
        fb.conversation = conv
        fb.save()


def refer_tag_to_conversation(apps, schema_editor):
    FeedbackTag = apps.get_model("feedback", "FeedbackTag")
    for tag in FeedbackTag.objects.all():
        tag.conversations.set([fb.conversation for fb in tag.feedbacks.only('conversation')])
        tag.feedbacks.clear()


# Set tag to refer to newest feedback of conversation; not entirely accurate, but enables reversing migration
def refer_tag_to_feedback(apps, schema_editor):
    FeedbackTag = apps.get_model("feedback", "FeedbackTag")
    for tag in FeedbackTag.objects.all():
        tag.feedbacks.set([conv.feedbacks.get(superseded_by=None) for conv in tag.conversations.only('feedbacks')])
        tag.conversations.clear()


class Migration(migrations.Migration):

    dependencies = [
        ('feedback', '0019_alter_exercise_options_exercise_consecutive_order_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='conversations', to='feedback.exercise', verbose_name='Exercise')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='feedback.student', verbose_name='Student')),
            ],
            options={
                'unique_together': {('exercise', 'student')},
            },
        ),
        migrations.AddField(
            model_name='feedback',
            name='conversation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='feedbacks', to='feedback.conversation'),
            preserve_default=False,
        ),
        # Go through all existing feedback, create conversations and
        # link feedback to correct conversations
        migrations.RunPython(generate_conversations_for_old_feedback, migrations.RunPython.noop),
        # Remove null=True
        migrations.AlterField(
            model_name='feedback',
            name='conversation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='feedbacks', to='feedback.conversation'),
        ),
        migrations.AddField(
            model_name='feedbacktag',
            name='conversations',
            field=models.ManyToManyField(related_name='tags', to='feedback.conversation'),
        ),
        # Set feedbacktags to refer to conversations rather than individual feedback
        migrations.RunPython(refer_tag_to_conversation, refer_tag_to_feedback),
        migrations.RemoveField(
            model_name='feedbacktag',
            name='feedbacks',
        ),
    ]
